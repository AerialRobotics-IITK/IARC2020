<?xml version="1.0"?>
<launch>
    <arg name="agent_name" default="firefly"/>
    <arg name="agent_type" default="firefly"/>
    <arg name="agent_x" default="-5.0"/>
    <arg name="agent_y" default="1.0"/>

    <arg name="carrier_name" default="neo11"/>
    <arg name="carrier_type" default="neo11"/>
    <arg name="carrier_x" default="-5.0"/>
    <arg name="carrier_y" default="-1.0"/>

    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>
    <arg name="gui" default="true"/>
    <arg name="paused" default="false"/>
    <arg name="extra_gazebo_args" default=""/>

    <arg name="world_name" default="static_comm_block"/>
    <arg name="enable_logging" default="false" />
    <arg name="enable_ground_truth" default="true" />
    <arg name="log_file" default="iarc" />

    <env name="GAZEBO_MODEL_PATH" value="$(optenv GAZEBO_MODEL_PATH):$(find rotors_gazebo)/models:$(find iarc_simulation_tools)/models:$(find iarc_wave_sim_gazebo)/models"/>
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find iarc_simulation_tools)/worlds/$(arg world_name).world" />
        <arg name="debug" value="$(arg debug)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)" />
        <arg name="verbose" value="$(arg verbose)"/>
    </include>

    <group ns="$(arg agent_name)">
        <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
            <arg name="mav_name" value="$(arg agent_name)" />
            <arg name="model" value="$(find iarc_simulation_tools)/urdf/mav.xacro" />
            <arg name="x" default="$(arg agent_x)"/>
            <arg name="y" default="$(arg agent_y)"/>
        </include>

        <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
            <remap from="odometry" to="odometry_sensor1/odometry" />
            <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg agent_name).yaml" />
            <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg agent_name).yaml"/>
            <param name="use_rc_teleop" value="false"/>
            <param name="verbose" value="false" />
            <param name="reference_frame" value="world"/>
        </node>

        <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
            <remap from="odometry" to="odometry_sensor1/odometry" />
            <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg agent_name).yaml" />
        </node>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    </group>

    <group ns="$(arg carrier_name)">
        <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
            <arg name="mav_name" value="$(arg carrier_name)" />
            <arg name="model" value="$(find iarc_simulation_tools)/urdf/mav.xacro" />
            <arg name="x" default="$(arg carrier_x)"/>
            <arg name="y" default="$(arg carrier_y)"/>
        </include>

        <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
            <remap from="odometry" to="odometry_sensor1/odometry" />
            <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg carrier_name).yaml" />
            <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg carrier_name).yaml"/>
            <param name="use_rc_teleop" value="false"/>
            <param name="verbose" value="false" />
            <param name="reference_frame" value="world"/>
        </node>

        <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
            <remap from="odometry" to="odometry_sensor1/odometry" />
            <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg carrier_name).yaml" />
        </node>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

    </group>
</launch>